{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_1",
						"type": "DatasetReference"
					},
					"name": "empdata",
					"description": "emp_data as source 1"
				},
				{
					"dataset": {
						"referenceName": "DS_2",
						"type": "DatasetReference"
					},
					"name": "deptdata",
					"description": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Des_DS",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "ModifyColumns2",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "innerjoin"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Emp_id as string,",
				"          Emp_name as string,",
				"          Deptno as string,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     limit: 10,",
				"     ignoreNoFilesFound: false) ~> empdata",
				"source(output(",
				"          deptno as string,",
				"          department_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 8,",
				"     ignoreNoFilesFound: false) ~> deptdata",
				"deptdata derive(department_name = upper(trim(department_name,\"'\"))) ~> ModifyColumns1",
				"empdata derive(Emp_name = trim(Emp_name,\"'\"),",
				"          address = trim(address,\"'\")) ~> ModifyColumns2",
				"ModifyColumns2, ModifyColumns1 join(empdata@Deptno == deptdata@deptno,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> innerjoin",
				"innerjoin select(mapColumn(",
				"          Emp_id,",
				"          Emp_name,",
				"          Deptno = empdata@Deptno,",
				"          address,",
				"          department_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Emp_id as string,",
				"          Emp_name as string,",
				"          Deptno as string,",
				"          address as string",
				"     ),",
				"     partitionFileNames:['empDataT.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}