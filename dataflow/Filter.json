{
	"name": "Filter",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_2",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Des_DS",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "ModifyColumns2",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "join1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "RemoveColumns2",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Emp_id as string,",
				"          Emp_name as string,",
				"          Deptno as string,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source1",
				"source(output(",
				"          deptno as string,",
				"          department_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source2",
				"source1 derive(Emp_name = trim(Emp_name,\"'\")) ~> ModifyColumns1",
				"ModifyColumns1 derive(address = upper(trim(address,\"'\"))) ~> ModifyColumns2",
				"ModifyColumns2, source2 join(source1@Deptno == source2@deptno,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"RemoveColumns2 filter(equals(Deptno,'10'),",
				"     partitionBy('hash', 1)) ~> filter1",
				"join1 select(mapColumn(",
				"          Emp_id,",
				"          Emp_name,",
				"          Deptno = source1@Deptno,",
				"          address,",
				"          department_name",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns2",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Emp_id as string,",
				"          Emp_name as string,",
				"          Deptno as string,",
				"          address as string",
				"     ),",
				"     partitionFileNames:['SingleDp.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}