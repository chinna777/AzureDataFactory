{
	"name": "split",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_2",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Des_DS",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Des_DS",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "Des_DS",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "join1"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Emp_id as string,",
				"          Emp_name as string,",
				"          Deptno as string,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          deptno as string,",
				"          department_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source2",
				"RemoveColumns1 split(equals(Deptno, '10'),",
				"     equals(Deptno,'20'),",
				"     equalsIgnoreCase(Deptno,'30'),",
				"     disjoint: false) ~> split1@(itStream, purchase, HRStream)",
				"source1, source2 join(source1@Deptno == source2@deptno,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          Emp_id,",
				"          Emp_name,",
				"          Deptno = source1@Deptno,",
				"          address,",
				"          department_name",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"split1@itStream sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Emp_id as string,",
				"          Emp_name as string,",
				"          Deptno as string,",
				"          address as string",
				"     ),",
				"     partitionFileNames:['itDept.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@purchase sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Emp_id as string,",
				"          Emp_name as string,",
				"          Deptno as string,",
				"          address as string",
				"     ),",
				"     partitionFileNames:['purchase.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"split1@HRStream sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Emp_id as string,",
				"          Emp_name as string,",
				"          Deptno as string,",
				"          address as string",
				"     ),",
				"     partitionFileNames:['HrDept.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3"
			]
		}
	}
}